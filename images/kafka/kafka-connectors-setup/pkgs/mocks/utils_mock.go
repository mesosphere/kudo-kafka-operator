// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mesosphere/kudo-kafka-operator/images/kafka/kafka-connectors-setup/pkgs/utils (interfaces: Utils)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUtils is a mock of Utils interface
type MockUtils struct {
	ctrl     *gomock.Controller
	recorder *MockUtilsMockRecorder
}

// MockUtilsMockRecorder is the mock recorder for MockUtils
type MockUtilsMockRecorder struct {
	mock *MockUtils
}

// NewMockUtils creates a new mock instance
func NewMockUtils(ctrl *gomock.Controller) *MockUtils {
	mock := &MockUtils{ctrl: ctrl}
	mock.recorder = &MockUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUtils) EXPECT() *MockUtilsMockRecorder {
	return m.recorder
}

// DownloadFile mocks base method
func (m *MockUtils) DownloadFile(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile
func (mr *MockUtilsMockRecorder) DownloadFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockUtils)(nil).DownloadFile), arg0, arg1)
}

// ExtractFile mocks base method
func (m *MockUtils) ExtractFile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtractFile indicates an expected call of ExtractFile
func (mr *MockUtilsMockRecorder) ExtractFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractFile", reflect.TypeOf((*MockUtils)(nil).ExtractFile), arg0, arg1)
}

// RegisterConnector mocks base method
func (m *MockUtils) RegisterConnector(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterConnector", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterConnector indicates an expected call of RegisterConnector
func (mr *MockUtilsMockRecorder) RegisterConnector(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterConnector", reflect.TypeOf((*MockUtils)(nil).RegisterConnector), arg0, arg1)
}
