// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mesosphere/kudo-kafka-operator/images/kafka-utils/pkgs/service (interfaces: Environment)

// Package mocks is a generated GoMock package.
package mocks

import (
	"github.com/golang/mock/gomock"

	"reflect"
)

// MockEnvironment is a mock of Environment interface
type MockEnvironment struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentMockRecorder
}

// MockEnvironmentMockRecorder is the mock recorder for MockEnvironment
type MockEnvironmentMockRecorder struct {
	mock *MockEnvironment
}

// NewMockEnvironment creates a new mock instance
func NewMockEnvironment(ctrl *gomock.Controller) *MockEnvironment {
	mock := &MockEnvironment{ctrl: ctrl}
	mock.recorder = &MockEnvironmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEnvironment) EXPECT() *MockEnvironmentMockRecorder {
	return m.recorder
}

// GetExternalIngressPort mocks base method
func (m *MockEnvironment) GetExternalIngressPort() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalIngressPort")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetExternalIngressPort indicates an expected call of GetExternalIngressPort
func (mr *MockEnvironmentMockRecorder) GetExternalIngressPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalIngressPort", reflect.TypeOf((*MockEnvironment)(nil).GetExternalIngressPort))
}

// GetHostName mocks base method
func (m *MockEnvironment) GetHostName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHostName indicates an expected call of GetHostName
func (mr *MockEnvironmentMockRecorder) GetHostName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostName", reflect.TypeOf((*MockEnvironment)(nil).GetHostName))
}

// GetNamespace mocks base method
func (m *MockEnvironment) GetNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace
func (mr *MockEnvironmentMockRecorder) GetNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockEnvironment)(nil).GetNamespace))
}

// GetNodeName mocks base method
func (m *MockEnvironment) GetNodeName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNodeName indicates an expected call of GetNodeName
func (mr *MockEnvironmentMockRecorder) GetNodeName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeName", reflect.TypeOf((*MockEnvironment)(nil).GetNodeName))
}
